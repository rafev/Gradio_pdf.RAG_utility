##########################################
## Load libraries
##########################################
from dotenv import load_dotenv
import os
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain_community.document_loaders import PyPDFLoader
from langchain_huggingface import HuggingFacePipeline
from langchain import hub
from langchain.chains import create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain

import gradio as gr

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')



##########################################
## Load API Keys
##########################################
load_dotenv()
HF_api_key = os.getenv('Huggingface_write_API_key')


##########################################
## Core RAG functions
##########################################

##LLM
def get_llm():
    model_id = 'mistralai/Mistral-7B-v0.1'
    model = AutoModelForCausalLM.from_pretrained(model_id, token=HF_api_key)
    tokenizer = AutoTokenizer.from_pretrained(model_id, token=HF_api_key)
    llm = pipeline(
        model=model,
        tokenizer=tokenizer,
        task="text-generation",
        do_sample=True,
        temperature=0.2,
        repetition_penalty=1.1,
        return_full_text=False,
        max_new_tokens=500
    )
    HuggingFace_llm = HuggingFacePipeline(pipeline=llm)
    return HuggingFace_llm

## Document Loader
def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document

## Text splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=512,
        chunk_overlap=50,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Embedding model
def HuggingFace_embedding():
    granite_embedding = HuggingFaceEmbeddings(
        model_name="BAAI/bge-small-en-v1.5",
    )
    return granite_embedding

## Vector db
def vector_database(chunks):
    embedding_model = HuggingFace_embedding()
    vectordb = FAISS.from_documents(chunks, embedding_model)
    return vectordb

## Retriever
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever


##########################################
## RAG QA Chain
##########################################
def retriever_qa(file, query):
    llm = get_llm()
    retriever_obj = retriever(file)
    retrieval_qa_chat_prompt = hub.pull("langchain-ai/retrieval-qa-chat")
    combine_docs_chain = create_stuff_documents_chain(llm, retrieval_qa_chat_prompt)
    rag_chain = create_retrieval_chain(retriever_obj, combine_docs_chain)
    
    response = rag_chain.invoke({"input": query})
    return response.get("answer")



##########################################
## Create Gradio interface
##########################################
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="never",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Output"),
    title="RAG Chatbot",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)

# Launch the app
rag_application.launch(share=True)
#rag_application.launch(server_name="0.0.0.0", server_port= 7860)